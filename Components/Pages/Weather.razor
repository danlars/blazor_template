@page "/weather"
@inject HttpClient Http
@attribute [StreamRendering]

<PageTitle>Vejr</PageTitle>

<h1>Vejr</h1>

@if (indlæserPrognoser)
{
    <p><em>Indlæser...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Dato</th>
                <th>Temp. (C)</th>
                <th>Regn</th>
                <th>Byger</th>
                <th>Skydække</th>
                <th>Snefald</th>
                <th>Sne dybde</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var timebaseretVejr in timebaseretVejrListe)
            {
                <tr>
                    <td>@timebaseretVejr.Tid</td>
                    <td>@timebaseretVejr.Temperatur2m</td>
                    <td>@timebaseretVejr.Regn</td>
                    <td>@timebaseretVejr.Byger</td>
                    <td>@timebaseretVejr.Skydække</td>
                    <td>@timebaseretVejr.Snefald</td>
                    <td>@timebaseretVejr.SneDybde</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool indlæserPrognoser = true;
    private WeatherForecast? prognose;
    private List<TimebaseretVejrdata>? timebaseretVejrListe;
    
    // Koordinater for Aalborg
    private const double Breddegrad = 57.048;
    private const double Længdegrad = 9.9187;

    protected override async Task OnInitializedAsync()
    {
        var anmodningsURL = $"https://api.open-meteo.com/v1/forecast?latitude={Breddegrad}&longitude={Længdegrad}&hourly[]=temperature_2m&hourly[]=rain&hourly[]=cloud_cover&hourly[]=showers&hourly[]=snowfall&hourly[]=snow_depth";
        prognose = await Http.GetFromJsonAsync<WeatherForecast>(anmodningsURL);
        timebaseretVejrListe = new List<TimebaseretVejrdata>();

        if (prognose?.Hourly?.Time != null)
        {
            for (int i = 0; i < prognose.Hourly.Time.Count; i++)
            {
                timebaseretVejrListe.Add(new TimebaseretVejrdata
                {
                    Tid = FormaterDatoTid(prognose.Hourly.Time[i]),
                    Temperatur2m = $"{prognose.Hourly.Temperature2m?[i]} {prognose.HourlyUnits?.Temperature2m}",
                    Regn = $"{prognose.Hourly.Rain?[i]} {prognose.HourlyUnits?.Rain}",
                    Byger = $"{prognose.Hourly.Showers?[i]} {prognose.HourlyUnits?.Showers}",
                    Skydække = $"{prognose.Hourly.CloudCover?[i]} {prognose.HourlyUnits?.CloudCover}",
                    Snefald = $"{prognose.Hourly.Snowfall?[i]} {prognose.HourlyUnits?.Snowfall}",
                    SneDybde = $"{prognose.Hourly.SnowDepth?[i]} {prognose.HourlyUnits?.SnowDepth}"
                });
            }
        }

        indlæserPrognoser = false;
    }
    
    private string FormaterDatoTid(string isoString)
    {
        if (DateTime.TryParse(isoString, out var dt))
        {
            // Viser dags dato for i dag og i morgen for at gøre det mere læseligt
            if (dt.Date == DateTime.Today) return $"I dag {dt:HH:mm}";
            if (dt.Date == DateTime.Today.AddDays(1)) return $"I morgen {dt:HH:mm}";
            return dt.ToString("dd/MM HH:mm");
        }
        return isoString;
    }

    private class TimebaseretVejrdata
    {
        public string? Skydække { get; set; }
        public string? Regn { get; set; }
        public string? Byger { get; set; }
        public string? SneDybde { get; set; }
        public string? Snefald { get; set; }
        public string? Temperatur2m { get; set; }
        public string? Tid { get; set; }
    } 
}